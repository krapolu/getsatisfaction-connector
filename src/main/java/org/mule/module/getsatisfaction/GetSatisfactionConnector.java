/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.getsatisfaction;

import java.util.ArrayList;
import java.util.List;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.module.getsatisfaction.getsatisfaction.api.GetSatisfactionClient;
import org.mule.module.getsatisfaction.getsatisfaction.api.GetSatisfactionClientImpl;
import org.mule.module.getsatisfaction.getsatisfaction.api.Product;
import org.mule.module.getsatisfaction.getsatisfaction.api.Reply;
import org.mule.module.getsatisfaction.getsatisfaction.api.Topic;
import org.mule.module.getsatisfaction.getsatisfaction.api.TopicStyle;
import org.mule.module.getsatisfaction.getsatisfaction.api.User;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="getsatisfaction", schemaVersion="1.0")
public class GetSatisfactionConnector
{
    /**
     * Get Satisfaction Fastpass Key
     */
    @Configurable
    private String key;
    
    /**
     * Get Satisfaction Fastpass Secret
     */    
    @Configurable
    private String secret;

    private User user;
    
    private GetSatisfactionClient client = new GetSatisfactionClientImpl();

    /**
     * Connect
     * @param email
     * @param uid
     * @param fullName
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String email, String uid, String fullName) throws ConnectionException
    {
        user = new User();
        user.setEmail(email);
        user.setFullName(fullName);
        user.setUid(uid);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() 
    {
        this.user = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected()
    {
        return this.user != null;
    }

    /**
     * Connection ID
     */
    @ConnectionIdentifier
    public String connectionId()
    {
        return this.user != null ? this.user.getEmail() : "null user";
    }
    
    /**
     * Create Topic
     * @param style Style
     * @param subject Subject
     * @param additionalDetails Additional Details
     * @param productIds Product IDs
     * @param keywords Keywords
     * @return
     * @throws Exception
     */
    @Processor
    public Topic createTopic(@Optional @Default("QUESTION") TopicStyle style, String subject, @Optional String additionalDetails, List<String> productIds, @Optional List<String> keywords) throws Exception
    {
        Topic topic = new Topic();
        topic.setUser(this.user);
        
        topic.setStyle(style);
        topic.setSubject(subject);
        topic.setAdditionalDetails(additionalDetails);
        
        List<Product> products = new ArrayList<Product>();
        for(String id : productIds)
        {
            products.add(new Product(id));
        }
        topic.setProducts(products);
        topic.setKeywords(keywords);
        
        client.create(topic);
        
        return topic;
    }

    /**
     * Create reply
     * @param topicId Topic ID
     * @param content Content
     * @return
     * @throws Exception
     */
    @Processor
    public Reply createReply(String topicId, String content) throws Exception
    {
        Topic topic = new Topic();
        topic.setId(topicId);
        
        Reply reply = new Reply();
        reply.setUser(this.user);
        reply.setTopic(topic);
        
        reply.setContent(content);
        
        client.create(reply);
        
        return reply;
    }
    
    public String getKey()
    {
        return key;
    }

    public void setKey(String key)
    {
        this.key = key;
    }

    public String getSecret()
    {
        return secret;
    }

    public void setSecret(String secret)
    {
        this.secret = secret;
    }
}
